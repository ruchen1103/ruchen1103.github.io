<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如尘</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-07T09:10:04.190Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一道闭包问题</title>
    <link href="http://example.com/2020/11/07/%E4%B8%80%E9%81%93%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/11/07/%E4%B8%80%E9%81%93%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-07T08:52:11.000Z</published>
    <updated>2020-11-07T09:10:04.190Z</updated>
    
    <content type="html"><![CDATA[<p>遇到的一道闭包问题，做错了，记录一下。<br>题目是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    A=<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        alert(a+b++);</span><br><span class="line">    &#125;;</span><br><span class="line">    alert(a++);</span><br><span class="line">&#125;</span><br><span class="line">A(<span class="number">1</span>);</span><br><span class="line">A(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>答案是”1”,”4”;<br>首先执行A(1)，执行部分为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    alert(a+b++);</span><br><span class="line">&#125;;</span><br><span class="line">alert(a++);</span><br></pre></td></tr></table></figure><p>此时a为参数1，执行后A被重写为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    alert(a+b++);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并且alert(a++)，因为a为1，所以输出”1”，并且a++，a在执行后变为2。<br>然后执行A(2),此时的A已经被重写，所以A(2)的执行部分为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(a+b++);</span><br></pre></td></tr></table></figure><p>b为参数2，a在重写的A中没有定义，向上级寻找，而重写后的A依赖于没有重写的A，即A(1)的执行部分。<br>而在A(1)执行后a变为了2<br>所以A(2)的结果为：alert(2+(2++)),结果为”4”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;遇到的一道闭包问题，做错了，记录一下。&lt;br&gt;题目是：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>VSCode代码规范化</title>
    <link href="http://example.com/2020/10/16/VSCode%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%8C%96/"/>
    <id>http://example.com/2020/10/16/VSCode%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%8C%96/</id>
    <published>2020-10-16T07:27:06.000Z</published>
    <updated>2020-10-20T05:42:35.526Z</updated>
    
    <content type="html"><![CDATA[<p>最近用vue-cli写代码的时候发现.vue文件之前设置的自动规范代码不能规范.vue文件。<br>这样写组件的时候HTML标签都不能对齐，特别难受，所以就去找了找相关的文章。<br>首先要用到的插件有：prettier， HTML Snippets。</p><p>hexi然后打开左下角的设置，进入settings.json文件设置。下面的是我的文件设置</p><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;eslint.codeAction.showDocumentation&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;enable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//如果是想根据vue项目中的eslint真的规范，只需要安装eslint插件并且配置上面这句就好了</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnType&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;first&quot;</span>,</span><br><span class="line"><span class="attr">&quot;vsintellicode.modify.editor.suggestSelection&quot;</span>: <span class="string">&quot;automaticallyOverrodeDefaultValue&quot;</span>,</span><br><span class="line"><span class="comment">//下面在相应的文件下使用shift+alt+f就会弹出让你选择按照什么插件规范化</span></span><br><span class="line"><span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;[css]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//prettier的配置文件地址</span></span><br><span class="line"><span class="attr">&quot;prettier.configPath&quot;</span>: <span class="string">&quot;C:\\Program Files (x86)\\Microsoft VS Code\\prettier.config.js&quot;</span>,</span><br><span class="line"><span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>我的prettier配置文件,可以在插件官网查看</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// 一行最多 100 字符</span></span><br><span class="line">printWidth: <span class="number">100</span>,</span><br><span class="line"><span class="comment">// 使用 4 个空格缩进</span></span><br><span class="line">tabWidth: <span class="number">4</span>,</span><br><span class="line"><span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">useTabs: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 行尾需要有分号</span></span><br><span class="line">semi: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 使用单引号</span></span><br><span class="line">singleQuote: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">quoteProps: <span class="string">&quot;as-needed&quot;</span>,</span><br><span class="line"><span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 末尾不需要逗号</span></span><br><span class="line">trailingComma: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line"><span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">bracketSpacing: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">jsxBracketSameLine: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class="line">arrowParens: <span class="string">&quot;always&quot;</span>,</span><br><span class="line"><span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">rangeStart: <span class="number">0</span>,</span><br><span class="line">rangeEnd: <span class="literal">Infinity</span>,</span><br><span class="line"><span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">requirePragma: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">insertPragma: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 使用默认的折行标准</span></span><br><span class="line">proseWrap: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line"><span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">htmlWhitespaceSensitivity: <span class="string">&quot;css&quot;</span>,</span><br><span class="line"><span class="comment">// 换行符使用 lf</span></span><br><span class="line">endOfLine: <span class="string">&quot;lf&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近用vue-cli写代码的时候发现.vue文件之前设置的自动规范代码不能规范.vue文件。&lt;br&gt;这样写组件的时候HTML标签都不能对齐，特别难受，所以就去找了找相关的文章。&lt;br&gt;首先要用到的插件有：prettier， HTML Snippets。&lt;/p&gt;
&lt;p&gt;hex</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="vue" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/vue/"/>
    
    
    <category term="问题" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习笔记</title>
    <link href="http://example.com/2020/10/08/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/08/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-08T11:48:58.000Z</published>
    <updated>2020-10-19T14:30:46.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明：根据 B 站学习视频 ：<a href="https://www.bilibili.com/video/BV1a741197Hn">https://www.bilibili.com/video/BV1a741197Hn</a> 学习整理</p></blockquote><blockquote><p>主要内容参考：<a href="https://blog.csdn.net/z591391960/article/details/105612471">https://blog.csdn.net/z591391960/article/details/105612471</a></p></blockquote><p>本次学习到的内容：<br>webpack 产生的背景<br>理解前端的模块化、模块化演变的过程<br>理解 webpack 打包的核心思路<br>webpack 核心：loader<br>webpack 核心：plugin<br><font face="黑体" size=5>1 webpack 是什么</font><br>一个现代 JavaScript 应用程序的静态模块打包器</p><p>默认：只对 js 进行处理，其他类型文件需要配置 loader 或者插件进行处理。<br>打包：将各个依赖文件进行梳理打包，形成一个 JS 依赖文件。<br><font face="黑体" size=5>2 webpack 产生的背景</font><br>首先，为什么打包？因为：</p><p>各个依赖文件的关系难以梳理，耦合程度较高，代码难以维护。<br>把所有依赖包都打包成为一个 js 文件（bundle.js）文件，会有效降低文件请求次数，一定程度提升性能。<br>逻辑多、文件多，项目复杂度提高<br>其他<br>然后，为什么要用 webpack？因为：</p><p>webpack 除提供上述功能外，还充当了“翻译官”的角色，例如将 ES6 翻译为低版本的语法，将 less、sass 翻译为 css 等功能。<br>强大而灵活，plugin 可插拔。<br>其他<br><font face="黑体" size=5>3 先理解下前端模块化</font></p><p><b>3-1 作用域</b><br>就是采用闭包保护模块属性内部安全性，具体可以看视频或者原博客<br><b>3-2 模块化的优点</b></p><ul>    <li>模块化的封装</li>    <li>重用性</li>    <li>解除耦合</li>  </ul><p><b>3-3 模块化方案进化史</b><br>随着模块化优势体现，开发者更倾向于使用模块化协同开发项目，于是在发展过程中形成了很多规范：AMD、COMMONJS、ES6 MODULE<br>现在主要使用 ES6，他们的区别可以看视频或者原博客<br><font face="黑体" size=5>4 webpack 的打包机制</font><br><b>webpack 打包过程</b></p><ul>    <li>从入口文件开始，分析整个应用的依赖树</li>    <li>将每个依赖模块包装起来，放到一个数组中等待调用</li>    <li>实现模块加载的方法，并把它放到模块执行的环境中，确保模块间可以互相调用</li>      <li>把执行入口文件的逻辑放在一个函数表达式中，并立即执行这个函数</li>  </ul><p><font face="黑体" size=5>5 常用插件 plugins</font></p><p><b>babel</b><br>作用: 将高版本语法 ES6 转换为低版本语法<br>使用方法（直接编译）：babel -index.js –presets=@babel preset-env<br><b>preset-react</b></p><p>解析 jsx 语法<br>使用方法一：package.json 中，加入 babel 配置参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span> : [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方法二：在 package.json 文件同目录下，设置.babelrc 文件里面配置同方法一<br><b>html-webpack-plugin</b></p><p>具体可参考这里，主要功能是：</p><p>为 html 文件中引入的外部资源如 script、link 动态添加每次 compile 后的 hash，防止引用缓存的外部文件问题</p><p>可以生成创建 html 入口文件，比如单页面可以生成一个 html 文件入口，配置 N 个 html-webpack-plugin 可以生成 N 个页面入口</p><p><font face="黑体" size=5>6 webpack.config.js 配置项解释</font></p><p><b>webpack 的常见配置</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: path.join(__dirname, <span class="string">&quot;../src/js/index.js&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 输出文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&quot;[name].bundle.js&quot;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        publicPath: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// loader配置</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugins配置</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 重新创建html文件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">            filename: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">&quot;../src/index.html&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>是否缓存，可以提升 webpack 打包执行的速度，配置如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cacheDictionary: <span class="literal">true</span> / <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>.js .jsx .json 文件引用时候，不需要加入后缀，只需要文件名即可，但是重名的还是需要全名，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolve: extensions：[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><p><font face="黑体" size=5>7 webpack-dev-server</font></p><ul><li>webpack-dev-server –open 直接打开浏览器运行项目</li><li>提供文件变化监听，如果项目文件有更新，会自动打包，并刷新页面</li></ul><p><font face="黑体" size=5>8 webpack HRM 模块热更新</font></p><p>plugin 中加入：webpack.HotModuleReplacementPlugin()</p><p><font face="黑体" size=5>9 打包优化</font><br>体积优化（打包出来结果大小优化）：TerserPlugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  minimizer: [</span><br><span class="line">    <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">      <span class="comment">// 加快构建速度</span></span><br><span class="line">      cache: <span class="literal">true</span>,</span><br><span class="line">      parrlel: <span class="literal">true</span>, <span class="comment">// 多线程处理</span></span><br><span class="line">      terserOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          <span class="comment">//删除掉一些没有用的代码</span></span><br><span class="line">          unused: <span class="literal">true</span>,</span><br><span class="line">          drop_debugger: <span class="literal">true</span>,</span><br><span class="line">          drop_console: <span class="literal">true</span>,</span><br><span class="line">          dead_code: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="黑体" size=5>10 webpackBundleAnalyzer 可视化 webpack 分析器</font></p><p>打包过程中会出现分析后的页面</p><p><font face="黑体" size=5>11 happyPack</font></p><ul><li>多线程打包</li><li>可以根据 cpu 数量构建线程池</li><li>使用 thread-loader</li></ul><p><font face="黑体" size=5>12 tree-shaking</font></p><p>DCE 的另一种实现方式，摇晃树，可以去掉无用的树叶<br>作用：例如定义了一个 util，里面很多公用的方法，但是很多方法没有用到，那么在 dev 环境打包时候，输出文件中就可以看到很多没用到的方法声明，但是在 pro 环境打包时候，输出文件中就没有这些方法，消除掉这部分没用的代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;说明：根据 B 站学习视频 ：&lt;a href=&quot;https://www.bilibili.com/video/BV1a741197Hn&quot;&gt;https://www.bilibili.com/video/BV1a741197Hn&lt;/a&gt; 学习整理&lt;/p</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="webpack" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/webpack/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack遇到的问题</title>
    <link href="http://example.com/2020/10/08/webpack%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/10/08/webpack%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-08T09:15:38.000Z</published>
    <updated>2020-11-08T11:12:30.931Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/source/_posts/img/2.png"></p><pre><code>一、 问题描述    在配置webpack.config.js自动打包的时候,出现Error: Cannot find module &#39;@babel/core&#39;错误    最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。    百度之后发现是官方默认babel-loader | babel 对应的版本需要一致。</code></pre><p><img src="/source/_posts/img/1.png"></p><pre><code>二、解决方法    两种解决方案: 1. 回退低版本    npm install -D babel-loader@7 babel-core babel-preset-env    更新到最高版本:    npm install -D babel-loader @babel/core @babel/preset-env webpack</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/source/_posts/img/2.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一、 问题描述
    在配置webpack.config.js自动打包的时候,出现Error: Cannot find module &amp;#39;@babel/core&amp;</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="webpack" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/webpack/"/>
    
    
    <category term="问题解决" scheme="http://example.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>myfirstblog</title>
    <link href="http://example.com/2020/10/07/myfirstblog/"/>
    <id>http://example.com/2020/10/07/myfirstblog/</id>
    <published>2020-10-07T08:24:07.000Z</published>
    <updated>2020-10-08T13:12:19.852Z</updated>
    
    <content type="html"><![CDATA[<pre><code>    欢迎来到我的博客，这是我的第一篇博客，也不知道要写些什么。    之后我会在这上面发一些学习笔记之类的。    233333，就这样吧。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;    欢迎来到我的博客，这是我的第一篇博客，也不知道要写些什么。
    之后我会在这上面发一些学习笔记之类的。
    233333，就这样吧。&lt;/code&gt;&lt;/pre&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="闲言闲语" scheme="http://example.com/tags/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
</feed>
